openapi: 3.0.0
info:
  title: Secret Group Keystore API
  description: Secret Group Keystore API
  version: 1.0.0

servers:
  - url: https://anypoint.mulesoft.com/secrets-manager/api/v1/
    description: Anypoint Cloudhub
  - url: https://eu1.anypoint.mulesoft.com/secrets-manager/api/v1/
    description: Anypoint Cloudhub EU
  - url: https://gov.anypoint.mulesoft.com/secrets-manager/api/v1/
    description: Anypoint Cloudhub GOV

security:
  - bearerAuth: []

paths:
  /organizations/{orgId}/environments/{envId}/secretGroups/{secretGroupId}/truststores:
    parameters:
      - in: path
        name: orgId
        description: The organization Id
        required: true
        schema:
          type: string
      - in: path
        name: envId
        description: The environment id
        required: true
        schema:
          type: string
      - in: path
        name: secretGroupId
        description: The secret group id
        required: true
        schema:
          type: string
    get:
      operationId: GetSecretGroupTruststores
      parameters:
        - in: query
          name: type
          description: Filter the elements on the response to be of a specific type from {PEM, JKS, JCEKS, PKCS12}
          required: false
          schema:
            type: string
            enum:
              - PEM
              - JKS
              - JCEKS
              - PKCS12
      summary: Retrieves a secret-groups' collection of truststores.
      description: Retrieves a secret-groups' collection of truststores.
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '200':    # status code
          $ref: '#/components/responses/SuccessGetSecretGroupTruststoresCollection'
    post:
      operationId: PostSecretGroupTruststore
      parameters:
        - in: query
          name: allowExpiredCert
          description: With 'true' to allow uploading expired certificates
          required: true
          schema:
            type: boolean
      summary: Create a secret-groups' truststore.
      description: Create a secret-groups' truststore.
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/TruststoreReqBody"
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '201':    # status code
          $ref: '#/components/responses/SuccessPostSecretGroupTruststore'

  /organizations/{orgId}/environments/{envId}/secretGroups/{secretGroupId}/truststores/{secretId}:
    parameters:
      - in: path
        name: orgId
        description: The organization Id
        required: true
        schema:
          type: string
      - in: path
        name: envId
        description: The environment id
        required: true
        schema:
          type: string
      - in: path
        name: secretGroupId
        description: The secret group id
        required: true
        schema:
          type: string
      - in: path
        name: secretId
        description: The truststore id
        required: true
        schema:
          type: string
    get:
      operationId: GetSecretGroupTruststoreDetails
      summary: Retrieve truststore details
      description: Retrieves truststore details by id for a given secret group in a given organization and environment
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '200':    # status code
          $ref: '#/components/responses/SuccessGetSecretGroupTruststore'
    put:
      operationId: PutSecretGroupTruststore
      parameters:
        - in: query
          name: allowExpiredCert
          description: With 'true' to allow uploading expired certificates
          required: true
          schema:
            type: boolean
      summary: Update a given secret-group truststore
      description: Update truststore details for a given secret-group in a given organization and environment
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/TruststoreReqBody"
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '200':    # status code
          $ref: '#/components/responses/SuccessPutSecretGroupTruststore'
    patch:
      operationId: PatchSecretGroupTruststore
      requestBody:
        content:
          application/json::
            schema:
              $ref: "#/components/schemas/TruststorePatchBody"
      summary: Update a given secret-group truststore
      description: Update truststore details for a given secret-group in a given organization and environment
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '200':    # status code
          $ref: '#/components/responses/SuccessPatchSecretGroupTruststore'

components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    BadRequestError:
      description: Bad request response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/errorsResponse"
    NotFoundError:
      description: resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
              message:
                type: string
    SuccessGetSecretGroupTruststoresCollection:
      description: get secret-group truststores collection
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TruststoreSummaryCollection"
    SuccessPostSecretGroupTruststore:
      description: post secret-group truststore response
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              id:
                type: string
    SuccessGetSecretGroupTruststore:
      description: get secret-group trustsotre details response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Truststore"
    SuccessPutSecretGroupTruststore:
      description: put secret-group truststore response
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
    SuccessPatchSecretGroupTruststore:
      description: patch secret-group truststore response
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string


  schemas:
    errorsResponse:
      type: object
      title: errorsResponse
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                title: type
              dataPath:
                type: string
                title: dataPath
              keyword:
                type: string
                title: keyword
              schema:
                type: string
                title: schema
              data:
                type: string
                title: data
              message:
                type: string
                title: message

    TruststoreReqBody:
      oneOf:
        - $ref: "#/components/schemas/TruststorePEMBody"
        - $ref: "#/components/schemas/TruststoreOthersBody"

    TruststorePEMBody:
      type: object
      properties:
        expirationDate:
          type: string
          description: >
            Date on which this secret should expire. If not set, by default, it will be set to notAfter date of the public certificate from this keystore.
            Once the secret expires, a grant can not be requested for it.
        name:
          type: string
          description: The name of the truststore instance
        type:
          type: string
          enum:
            - PEM
        trustStore:
          type: string
          format: binary
          description: File containing one or more concatenated certificates in PEM format

    TruststoreOthersBody:
      type: object
      properties:
        expirationDate:
          type: string
          description: >
            Date on which this secret should expire. If not set, by default, it will be set to notAfter date of the public certificate from this keystore.
            Once the secret expires, a grant can not be requested for it.
        name:
          type: string
          description: The name of the truststore instance
        type:
          type: string
          enum:
            - JKS
            - JCEKS
            - PKCS12
        trustStore:
          type: string
          format: binary
          description: File containing one or more trusted certificate entries
        algorithm:
          type: string
          description: The algorithm used to initialize TrustManagerFactory
        storePassphrase:
          type: string
          description: The passphrase with which the trustStore file is protected

    TruststorePatchBody:
      type: object
      example: >
        {
          "name": "",
          "expirationDate": ""
        }

    TruststoreSummaryCollection:
      type: array
      items:
        $ref: "#/components/schemas/TruststoreSummary"

    TruststoreSummary:
      type: object
      properties:
        name:
          type: string
        meta:
          $ref: "#/components/schemas/Meta"
        expirationDate:
          type: string
        type:
          type: string

    Truststore:
      type: object
      properties:
        name:
          type: string
        expirationDate:
          type: string
        meta:
          $ref: "#/components/schemas/Meta"
        type:
          type: string
          description: Type of truststore supported
        details:
          $ref: "#/components/schemas/TruststoreDetails"
        truststoreFileName:
          type: string
          description: File name of the truststore that is stored in this secret
        algorithm:
          type: string
          description: Algorithm used to create the truststore manager factory which will make use of this truststore

    TruststoreDetails:
      type: object
      description: Details about each of the trusted certificate from the truststore
      properties:
        certificateEntries:
          type: array
          items:
            $ref: "#/components/schemas/CertificateEntry"

    Meta:
      type: object
      properties:
        id:
          type: string
        path:
          type: string

    IssuerSubject:
      type: object
      properties:
        commonName:
          type: string
        organizationName:
          type: string
        localityName:
          type: string
        organizationUnit:
          type: string
        state:
          type: string
        countryName:
          type: string


    CertificateValidity:
      type: object
      description: Details about validity period of this certificate
      properties:
        notBefore:
          type: string
        notAfter:
          type: string

    CertificateDetails:
      type: object
      properties:
        issuer:
          $ref: "#/components/schemas/IssuerSubject"
        subject:
          $ref: "#/components/schemas/IssuerSubject"
        subjectAlternativeName:
          type: array
          description: Collection of subject alternative names from the SubjectAltName x509 extension
          items:
            type: string
        version:
          type: string
        serialNumber:
          type: string
          description: Serial number assigned by the CA to this certificate, in hex format
        signatureAlgorithm:
          type: string
          description: Name of the signature algorithm
        publicKeyAlgorithm:
          type: string
          description: The standard algorithm name for the public key of this certificate
        basicConstraints:
          type: object
          description: This identifies if the subject of the certificate is a CA
          properties:
            certificateAuthority:
              type: boolean
              description: If set to true, indicates that this is a CA certificate.
        validity:
          $ref: "#/components/schemas/CertificateValidity"
        keyUsage:
          type: array
          description: A list of values defining the purpose of the public key i.e. the key usage extensions from this certificate
          items:
            type: string
        extendedKeyUsage:
          type: array
          description: A list of values providing details about the extended key usage extensions from this certificate.
          items:
            type: string
        certificateType:
          type: string
          description: The type of this certificate

    CertificateEntry:
      type: object
      properties:
        alias:
          type: string
          description: Alias associated with the certificate entry
        certificate:
          $ref: "#/components/schemas/CertificateDetails"




