openapi: 3.0.0
info:
  title: Secret Group TLS Context API
  description: Secret Group TLS Context API
  version: 1.0.0

servers:
  - url: https://anypoint.mulesoft.com/secrets-manager/api/v1/
    description: Anypoint Cloudhub
  - url: https://eu1.anypoint.mulesoft.com/secrets-manager/api/v1/
    description: Anypoint Cloudhub EU
  - url: https://gov.anypoint.mulesoft.com/secrets-manager/api/v1/
    description: Anypoint Cloudhub GOV

security:
  - bearerAuth: []

paths:
  /organizations/{orgId}/environments/{envId}/secretGroups/{secretGroupId}/tlsContexts:
    parameters:
      - in: path
        name: orgId
        description: The organization Id
        required: true
        schema:
          type: string
      - in: path
        name: envId
        description: The environment id
        required: true
        schema:
          type: string
      - in: path
        name: secretGroupId
        description: The secret group id
        required: true
        schema:
          type: string
    get:
      operationId: GetSecretGroupTlsContexts
      summary: Retrieves a secret-groups' collection of tls-contexts.
      description: Retrieves a secret-groups' collection of tls-contexts.
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '200':    # status code
          $ref: '#/components/responses/SuccessGetSecretGroupTlsContextCollection'
    post:
      operationId: PostSecretGroupTlsContext
      summary: Create a secret-groups' tls-context.
      description: Create a secret-groups' tls-context.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TlsContextPostBody"
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '201':    # status code
          $ref: '#/components/responses/SuccessPostSecretGroupTlsContext'

  /organizations/{orgId}/environments/{envId}/secretGroups/{secretGroupId}/tlsContexts/{secretId}:
    parameters:
      - in: path
        name: orgId
        description: The organization Id
        required: true
        schema:
          type: string
      - in: path
        name: envId
        description: The environment id
        required: true
        schema:
          type: string
      - in: path
        name: secretGroupId
        description: The secret group id
        required: true
        schema:
          type: string
      - in: path
        name: secretId
        description: The keystore id
        required: true
        schema:
          type: string
    get:
      operationId: GetSecretGroupTlsContextDetails
      summary: Retrieve tls-context details
      description: Retrieves tls-context details by id for a given secret group in a given organization and environment
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '200':    # status code
          $ref: '#/components/responses/SuccessGetSecretGroupTlsContextDetails'
    put:
      operationId: PutSecretGroupTlsContext
      summary: Update a given secret-group tls-context
      description: Update tls-context details for a given secret-group in a given organization and environment
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/TlsContextPutBody"
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '200':    # status code
          $ref: '#/components/responses/SuccessPutSecretGroupTlsContext'
    patch:
      operationId: PatchSecretGroupTlsContext
      requestBody:
        content:
          application/json::
            schema:
              $ref: "#/components/schemas/TlsContextPatchBody"
      summary: Update a given secret-group tls-context
      description: Update tls-context details for a given secret-group in a given organization and environment
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '200':    # status code
          $ref: '#/components/responses/SuccessPatchSecretGroupTlsContext'


components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    BadRequestError:
      description: Bad request response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/errorsResponse"
    NotFoundError:
      description: resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
              message:
                type: string
    SuccessGetSecretGroupTlsContextCollection:
      description: get secret-groups tls-context response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TlsContextSummaryCollection"
    SuccessPostSecretGroupTlsContext:
      description: post secret-groups tls-context response
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              id:
                type: string
    SuccessGetSecretGroupTlsContextDetails:
      description: get tls-context details response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TlsContextDetails"
    SuccessPutSecretGroupTlsContext:
      description: put tls-context details response
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
    SuccessPatchSecretGroupTlsContext:
      description: patch tls-context details response
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string

  schemas:
    errorsResponse:
      type: object
      title: errorsResponse
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                title: type
              dataPath:
                type: string
                title: dataPath
              keyword:
                type: string
                title: keyword
              schema:
                type: string
                title: schema
              data:
                type: string
                title: data
              message:
                type: string
                title: message

    TlsContextSummaryCollection:
      type: array
      items:
        $ref: "#/components/schemas/TlsContextSummary"

    TlsContextSummary:
      type: object
      properties:
        name:
          type: string
        meta:
          $ref: "#/components/schemas/Meta"
        expirationDate:
          type: string
        type:
          type: string

    TlsContextDetails:
      oneOf:
        - $ref: "#/components/schemas/TlsContextSF"
        - $ref: "#/components/schemas/TlsContextMule"
        - $ref: "#/components/schemas/TlsContextFlexGateway"

    TlsContextPostBody:
      description: >
        The body differs depending on the type of the tls-context you want to create.
        more information here: https://anypoint.mulesoft.com/exchange/portals/anypoint-platform/f1e97bc6-315a-4490-82a7-23abe036327a.anypoint-platform/secrets-manager/minor/1.6/console/method/%233344/
      oneOf:
        - $ref: "#/components/schemas/TlsContextFlexGatewayBody"
        - $ref: "#/components/schemas/TlsContextMuleBody"
        - $ref: "#/components/schemas/TlsContextFlexGatewayBody"

    TlsContextPutBody:
      description: >
        The body differs depending on the type of the tls-context you want to create.
        more information here: https://anypoint.mulesoft.com/exchange/portals/anypoint-platform/f1e97bc6-315a-4490-82a7-23abe036327a.anypoint-platform/secrets-manager/minor/1.6/console/method/%233344/
      oneOf:
        - $ref: "#/components/schemas/TlsContextFlexGatewayBody"
        - $ref: "#/components/schemas/TlsContextMuleBody"
        - $ref: "#/components/schemas/TlsContextFlexGatewayBody"

    TlsContextPatchBody:
      type: object
      example: >
        {
          "name": "",
          "expirationDate": ""
        }

    TlsContextSfBody:
      type: object
      properties:
        expirationDate:
          type: string
          description: >
            Date on which this secret should expire. If not set, by default, it will be set to one year from the date on which this secret is created/updated.
            Once the secret expires, a grant can not be requested for it.
        name:
          type: string
        acceptableTlsVersions:
          $ref: "#/components/schemas/AcceptableTlsVersionsSF"
        acceptableCipherSuites:
          $ref: "#/components/schemas/AcceptableCipherSuites"
        mutualAuthentication:
          $ref: "#/components/schemas/MutualAuthentication"
        enableMutualAuthentication:
          type: boolean
          description: This flag is to enable client authentication. To set this flag to true, both keystore and truststore must be set.
        target:
          type: string
          description: The target engine
          enum:
            - SecurityFabric
        keystore:
          description: >
            Refers to a secret of type keystore. In most cases, ECDSA will double performance vs. a 2K RSA key.
            Supported curves are secp521r1 (P-521), secp384r1 (P-384), and secp256r1 aka prime256v1 (P-256).
          $ref: "#/components/schemas/KeystoreTruststorePath"
        truststore:
          description: Refers to a secret of type truststore.
          $ref: "#/components/schemas/KeystoreTruststorePath"

    TlsContextMuleBody:
      type: object
      properties:
        name:
          type: string
        expirationDate:
          type: string
          description: >
            Date on which this secret should expire. If not set, by default, it will be set to one year from the date on which this secret is created/updated.
            Once the secret expires, a grant can not be requested for it.
        target:
          type: string
          description: The target engine. The enum type SecurityFabric is used for the Anypoint Security products.
          enum:
            - FlexGateway
            - Mule
            - SecurityFabric
        keystore:
          description: >
            Refers to secret of type keystore. Except 'PEM', all other types of keystores are supported.
            Even though this is marked as optional, at least one of this or truststore has to be set.
          $ref: "#/components/schemas/KeystoreTruststorePath"
        truststore:
          description: >
            Refers to secret of type truststore. Except 'PEM', all other types of truststores are supported.
            Even though this is marked as optional, at least one of this or keystore has to be set.
          $ref: "#/components/schemas/KeystoreTruststorePath"
        cipherSuites:
          type: array
          description: List of enabled cipher suites for Mule target
          items:
            type: string
        acceptableTlsVersions:
          $ref: "#/components/schemas/AcceptableTlsVersionsMule"
        insecure:
          type: boolean
          description: Setting this flag to true indicates that certificate validation should not be enforced, i.e. the truststore, even though set, is ignored at runtime.

    TlsContextFlexGatewayBody:
      type: object
      properties:
        name:
          type: string
        expirationDate:
          type: string
          description: >
            Date on which this secret should expire. If not set, by default, it will be set to one year from the date on which this secret is created/updated.
            Once the secret expires, a grant can not be requested for it.
        minTlsVersion:
          type: string
          description: Minimum TLS version supported.
          enum:
            - TLSv1.1
            - TLSv1.2
            - TLSv1.3
        maxTlsVersion:
          type: string
          description: Maximum TLS version supported.
          enum:
            - TLSv1.1
            - TLSv1.2
            - TLSv1.3
        target:
          type: string
          description: The target engine
          enum:
            - FlexGateway
        alpnProtocols:
          type: array
          description: supported HTTP versions in the most-to-least preferred order. At least one version must be specified.
          items:
            type: string
            enum:
              - h2
              - http/1.1
        inboundSettings:
          type: object
          description: Properties that are applicable only when the TLS context is used to secure inbound traffic.
          properties:
            enableClientCertValidation:
              type: boolean
              description: flag that indicates whether the client certificate validation must be enforced.
              default: false
        outboundSettings:
          type: object
          description: Properties that are applicable only when the TLS context is used to secure outbound traffic.
          properties:
            skipServerCertValidation:
              type: boolean
              description: flag that indicates whether the server certificate validation must be skipped.
              default: false
        cipherSuites:
          type: array
          description: >
            List of acceptable cipher suites for Flex Gateway target if min TLS version is < 1.3. If you are are not using the defaults and select individual ciphers, please select ciphers that match the configured keystore to ensure that TLS can setup a connection.
            For a keystore with an RSA key (the most common type), select ciphers which contain the string RSA (there are some exceptions).
            If using ECC ciphers, select ciphers which contain the string "ECDSA". TLS standards and documentation can be consulted for more background information.
          items:
            type: string
            enum:
              - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
              - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
              - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
              - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
              - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
              - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
              - TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256
              - TLS_RSA_WITH_AES_128_GCM_SHA256
              - TLS_RSA_WITH_AES_256_GCM_SHA384
              - TLS_RSA_WITH_NULL_SHA
              - TLS_RSA_WITH_AES_128_CBC_SHA
              - TLS_RSA_WITH_AES_256_CBC_SHA
              - TLS_PSK_WITH_AES_128_CBC_SHA
              - TLS_PSK_WITH_AES_256_CBC_SHA
              - TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
              - TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
              - TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
              - TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
              - TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA
              - TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA
              - TLS_RSA_WITH_3DES_EDE_CBC_SHA
        keystore:
          description: References to a 'PEM' type keystore. Other types of keystore are not supported.
          $ref: "#/components/schemas/KeystoreTruststorePath"
        truststore:
          description: References to a 'PEM' type truststore. Other types of truststore are not supported.
          $ref: "#/components/schemas/KeystoreTruststorePath"

    TlsContextSF:
      type: object
      properties:
        name:
          type: string
        expirationDate:
          type: string
        meta:
          $ref: "#/components/schemas/Meta"
        acceptableTlsVersions:
          $ref: "#/components/schemas/AcceptableTlsVersionsSF"
          description: TLS versions supported, at least one should be set to true
        target:
          type: string
          description: The target application
        keystore:
          $ref: "#/components/schemas/KeystoreTruststorePath"
          description: Refers to a secret of type keystore
        truststore:
          description: Refers to a secret of type truststore
          $ref: "#/components/schemas/KeystoreTruststorePath"
        enableMutualAuthentication:
          type: boolean
          description: This flag is to enable client authentication
        acceptableCipherSuites:
          description: >
            List of accepted cipher suites by Security Fabric target, at least one should be set to true.
            If you are are not using the defaults and select individual ciphers, please select ciphers that match the configured keystore to ensure that TLS can setup a connection.
            For a keystore with an RSA key (the most common type), select ciphers which contain the string RSA (there are some exceptions). If using ECC ciphers, select ciphers which contain the string "ECDSA".
            TLS standards and documentation can be consulted for more background information.
          $ref: "#/components/schemas/AcceptableCipherSuites"
        mutualAuthentication:
          description: Configuration for client authentication
          $ref: "#/components/schemas/MutualAuthentication"

    TlsContextMule:
      type: object
      properties:
        name:
          type: string
        expirationDate:
          type: string
        meta:
          $ref: "#/components/schemas/Meta"
        target:
          type: string
        keystore:
          $ref: "#/components/schemas/KeystoreTruststorePath"
          description: Refers to a secret of type keystore. Even though this is marked as optional, at least one of this or truststore will be set.
        truststore:
          $ref: "#/components/schemas/KeystoreTruststorePath"
          description: Refers to a secret of type truststore. Even though this is marked as optional, at least one of this or keystore will be set.
        cipherSuites:
          type: array
          description: List of enabled cipher suites for Mule target
          items:
            type: string
        acceptableTlsVersions:
          $ref: "#/components/schemas/AcceptableTlsVersionsMule"
          description: TLS versions supported, at least one should be set to true
        insecure:
          type: boolean
          description: Setting this flag to true indicates that certificate validation should not be enforced, i.e. the truststore, even though set, is ignored at runtime.
          default: false

    TlsContextFlexGateway:
      type: object
      properties:
        name:
          type: string
        expirationDate:
          type: string
        meta:
          $ref: "#/components/schemas/Meta"
        minTlsVersion:
          type: string
          description: Minimum TLS version supported.
        maxTlsVersion:
          type: string
          description: Maximum TLS version supported.
        target:
          type: string
          description: The target application
        alpnProtocols:
          type: array
          description: supported HTTP versions in the most-to-least preferred order. At least one version must be specified.
          items:
            type: string
        inboundSettings:
          type: object
          description: Properties that are applicable only when the TLS context is used to secure inbound traffic.
          properties:
            enableClientCertValidation:
              type: boolean
              description: flag that indicates whether the client certificate validation must be enforced.
        outboundSettings:
          type: object
          description: Properties that are applicable only when the TLS context is used to secure outbound traffic.
          properties:
            skipServerCertValidation:
              type: boolean
              description: flag that indicates whether the server certificate validation must be skipped.
        cipherSuites:
          type: array
          description: >
            List of acceptable cipher suites for Flex Gateway target if min TLS version is < 1.3.
            If you are are not using the defaults and select individual ciphers, please select ciphers that match the configured keystore to ensure that TLS can setup a connection.
            For a keystore with an RSA key (the most common type), select ciphers which contain the string RSA (there are some exceptions). If using ECC ciphers, select ciphers which contain the string "ECDSA".
            TLS standards and documentation can be consulted for more background information.
          items:
            type: string
        keystore:
          $ref: "#/components/schemas/KeystoreTruststorePath"
          description: Refers to a secret of type keystore
        truststore:
          $ref: "#/components/schemas/KeystoreTruststorePath"
          description: Refers to a secret of type truststore


    KeystoreTruststorePath:
      type: object
      properties:
        path:
          type: string
          description: Relative path of the secret to be referenced.

    MutualAuthentication:
      type: object
      properties:
        certificatePolicies:
          type: array
          description: >
            List of Object identifier (OID).
            OIDs are intended to be globally unique.
            They are formed by taking a unique numeric string (e.g. 1.3.5.7.9.24.68) and adding additional digits in a unique fashion (e.g. 1.3.5.7.9.24.68.1, 1.3.5.7.9.24.68.2, 1.3.5.7.9.24.68.1.1, etc.) An institution will acquire an arc (eg 1.3.5.7.9.24.68) and then extend the arc (called subarcs) as indicated above to create additional OID’s and arcs.
            There is no limit to the length of an OID, and virtually no computational burden to having a long OID.
          items:
            type: string
        certCheckingStrength:
          type: string
          description: allows application to control if strict or lax certificate checking will be performed during chain-of-trust processing
          enum:
            - Strict
            - Lax
        verificationDepth:
          type: integer
          default: 1
          description: maximum allowed chain length for the certificates
        performDomainChecking:
          type: boolean
          description: Whether or not to perform domain checking
          default: false
        certificatePolicyChecking:
          type: boolean
          default: false
          description: >
            Controls certificate policy processing as defined in RFC 3280, 5280. A certificate can contain zero or more policies.
            A policy is represented as an object identifier (OID). In an end entity certificate, this policy information indicate the policy under which the certificate has been issued and the purposes for which the certificate may be used.
            In a CA certificate, this policy information limits the set of policies for certification paths that include this certificate. Applications with specific policy requirements are expected to have a list of those policies that they will accept and to compare the policy OIDs in the certificate to that list.
            If this extension is critical, the path validation software MUST be able to interpret this extension (including the optional qualifier), or MUST reject the certificate
        requireInitialExplicitPolicy:
          type: boolean
          description: Indicates if the path must be valid for at least one of the certificate policies in the user-initial-policy-set.
          default: false
        revocationChecking:
          type: boolean
          description: Indicates if certificate revocation checking should be enabled or not
          default: false
        revocationCheckingMethod:
          type: string
          description: Protocol used for certificate revocation checking. Must be set if revocationChecking is set to 'true'.
          enum:
            - CRL
        crlDistributorConfig:
          description: Reference to a secret of type crlDistributorConfig. Must be set if revocationCheckingMethod is set to 'CRL'.
          $ref: "#/components/schemas/KeystoreTruststorePath"
        requireCrlForAllCa:
          type: boolean
          description: Indicates if a valid CRL file must be in effect for every immediate and root Certificate Authority (CA) in the chain-of-trust
          default: false
        sendTruststore:
          type: boolean
          description: Should the truststore i.e. trusted certificate authorities be sent to far-end during mutual authentication
          default: false
        certificatePinning:
          $ref: "#/components/schemas/CertificatePinning"
        authenticationOverrides:
          description: Override failing authentication when mutual authentication is being performed
          $ref: "#/components/schemas/AuthenticationOverrides"


    Meta:
      type: object
      properties:
        id:
          type: string
        path:
          type: string

    AcceptableCipherSuites:
      type: object
      description: >
        List of accepted cipher suites by Security Fabric target, at least one should be set to true. If you are are not using the defaults and select individual ciphers, please select ciphers that match the configured keystore to ensure that TLS can setup a connection.
        For a keystore with an RSA key (the most common type), select ciphers which contain the string RSA (there are some exceptions). If using ECC ciphers, select ciphers which contain the string "ECDSA".
        TLS standards and documentation can be consulted for more background information.
      properties:
        aes128GcmSha256:
          type: boolean
          default: false
          description: Allowed to be enabled only if tlsV1Dot2 is enabled.
        aes128Sha256:
          type: boolean
          default: false
          description: Allowed to be enabled only if tlsV1Dot2 is enabled.
        aes256GcmSha384:
          type: boolean
          default: false
          description: Allowed to be enabled only if tlsV1Dot2 is enabled.
        aes256Sha256:
          type: boolean
          default: false
          description: Allowed to be enabled only if tlsV1Dot2 is enabled.
        dheRsaAes128GcmSha256:
          type: boolean
          default: false
          description: Allowed to be enabled only if tlsV1Dot2 is enabled.
        dheRsaAes128Sha256:
          type: boolean
          default: false
          description: Allowed to be enabled only if tlsV1Dot2 is enabled.
        dheRsaAes256GcmSha384:
          type: boolean
          default: false
          description: Allowed to be enabled only if tlsV1Dot2 is enabled.
        dheRsaAes256Sha256:
          type: boolean
          default: false
          description: Allowed to be enabled only if tlsV1Dot2 is enabled.
        ecdheEcdsaAes128GcmSha256:
          type: boolean
          default: false
          description: Allowed to be enabled only if tlsV1Dot2 is enabled.
        ecdheEcdsaAes128Sha1:
          type: boolean
          default: false
          description: Allowed to be enabled only if tlsV1Dot2 is enabled.
        ecdheEcdsaAes256GcmSha384:
          type: boolean
          default: false
          description: Allowed to be enabled only if tlsV1Dot2 is enabled.
        ecdheEcdsaAes256Sha1:
          type: boolean
          default: false
          description: Allowed to be enabled only if tlsV1Dot2 is enabled.
        ecdheRsaAes128GcmSha256:
          type: boolean
          default: false
          description: Allowed to be enabled only if tlsV1Dot2 is enabled.
        ecdheRsaAes128Sha1:
          type: boolean
          default: false
          description: Allowed to be enabled only if tlsV1Dot2 is enabled.
        ecdheRsaAes256GcmSha384:
          type: boolean
          default: false
          description: Allowed to be enabled only if tlsV1Dot2 is enabled.
        ecdheRsaAes256Sha1:
          type: boolean
          default: false
          description: Allowed to be enabled only if tlsV1Dot2 is enabled.
        ecdheEcdsaChacha20Poly1305:
          type: boolean
          default: false
          description: Allowed to be enabled only if tlsV1Dot2 is enabled.
        ecdheRsaChacha20Poly1305:
          type: boolean
          default: false
          description: Allowed to be enabled only if tlsV1Dot2 is enabled.
        dheRsaChacha20Poly1305:
          type: boolean
          default: false
          description: Allowed to be enabled only if tlsV1Dot2 is enabled.
        tlsAes256GcmSha384:
          type: boolean
          default: false
          description: Allowed to be enabled only if tlsV1Dot2 is enabled.
        tlsChacha20Poly1305Sha256:
          type: boolean
          default: false
          description: Allowed to be enabled only if tlsV1Dot2 is enabled.
        tlsAes128GcmSha256:
          type: boolean
          default: false
          description: Allowed to be enabled only if tlsV1Dot2 is enabled.

    AuthenticationOverrides:
      type: object
      properties:
        certificateBadFormat:
          type: boolean
          description: Allow processing of certificates with bad format
          default: false
        certificateBadSignature:
          type: boolean
          description: Allow processing of certificates with bad signature
          default: false
        certificateNotYetValid:
          type: boolean
          description: Allow processing of certificates that are not yet valid
          default: false
        certificateHasExpired:
          type: boolean
          description: Allow processing of certificates that are expired
          default: false
        allowSelfSigned:
          type: boolean
          description: Allow self signed certificates
          default: false
        certificateUnresolved:
          type: boolean
          description: Allow unresolved certificates
          default: false
        certificateUntrusted:
          type: boolean
          description: Allow untrusted certificates
          default: false
        invalidCa:
          type: boolean
          description: Allow invalid certificate authority certificates
          default: false
        invalidPurpose:
          type: boolean
          description: Allow certificates with invalid purpose
          default: false
        other:
          type: boolean
          description: Override any miscellaneous error condition encountered
          default: false

    CertificatePinning:
      type: object
      properties:
        performCertificatePinning:
          type: boolean
        certificatePinset:
          description: Refers to a secret of type certificatePinset. Must be set if performCertificatePinning is set to 'true'.
          $ref: "#/components/schemas/KeystoreTruststorePath"

    AcceptableTlsVersionsSF:
      type: object
      description: TLS versions supported, at least one should be set to true
      properties:
        tlsV1Dot1:
          type: boolean
          description: TLS version 1.1
        tlsV1Dot2:
          type: boolean
          description: TLS version 1.2
        tlsV1Dot3:
          type: boolean
          description: TLS version 1.3

    AcceptableTlsVersionsMule:
      type: object
      description: TLS versions supported, at least one should be set to true
      properties:
        tlsV1Dot1:
          type: boolean
          description: TLS version 1.1
        tlsV1Dot2:
          type: boolean
          description: TLS version 1.2

