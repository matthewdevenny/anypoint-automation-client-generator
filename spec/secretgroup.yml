openapi: 3.0.0
info:
  title: Secret Group API
  description: Secret Group API
  version: 1.0.0

servers:
  - url: https://anypoint.mulesoft.com/secrets-manager/api/v1/
    description: Anypoint Cloudhub
  - url: https://eu1.anypoint.mulesoft.com/secrets-manager/api/v1/
    description: Anypoint Cloudhub EU
  - url: https://gov.anypoint.mulesoft.com/secrets-manager/api/v1/
    description: Anypoint Cloudhub GOV

security:
  - bearerAuth: []

paths:
  /organizations/{orgId}/environments/{envId}/secretGroups:
    parameters:
      - in: path
        name: orgId
        description: The organization Id
        required: true
        schema:
          type: string
      - in: path
        name: envId
        description: The environment id
        required: true
        schema:
          type: string
    get:
      operationId: GetEnvSecretGroups
      parameters:
        - name: downloadable
          in: query
          description: Filter and fetch list of secret groups based on value of 'downloadable' flag.
          required: false
          schema:
            type: boolean
      summary: Retrieves a collection of secret groups
      description: Retrieves collection of secret groups.
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '200':    # status code
          $ref: '#/components/responses/SuccessGetSecretGroupsCollection'
    post:
      operationId: PostSecretGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SecretGroupPostBody"
      summary: Creates a secret group
      description: Creates a secret group.
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '201':    # status code
          $ref: '#/components/responses/SuccessPostSecretGroup'

  /organizations/{orgId}/environments/{envId}/secretGroups/{secretGroupId}:
    parameters:
      - in: path
        name: orgId
        description: The organization Id
        required: true
        schema:
          type: string
      - in: path
        name: envId
        description: The environment id
        required: true
        schema:
          type: string
      - in: path
        name: secretGroupId
        description: The secret group id
        required: true
        schema:
          type: string
    get:
      operationId: GetSecretGroup
      summary: Retrieve a secret group
      description: Retrieve a secret group by id.
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '200':    # status code
          $ref: '#/components/responses/SuccessGetSecretGroup'
    patch:
      operationId: PatchSecretGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SecretGroupPatchBody"
      summary: Update a secret group
      description: Update a secret group by id.
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '200':    # status code
          $ref: '#/components/responses/SuccessPatchSecretGroup'
    delete:
      operationId: DeleteSecretGroup
      summary: Delete a secret group
      description: Delete a secret group by id.
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '204':    # status code
          $ref: '#/components/responses/SuccessDeleteSecretGroup'

components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    BadRequestError:
      description: Bad request response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/errorsResponse"
    NotFoundError:
      description: resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
              message:
                type: string
    SuccessGetSecretGroupsCollection:
      description: get list secret groups
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SecretGroupCollection"
    SuccessPostSecretGroup:
      description: post secret group response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SecretGroupPostResponse"
    SuccessGetSecretGroup:
      description: get secret group response
      content:
         application/json:
          schema:
            $ref: "#/components/schemas/SecretGroup"
    SuccessPatchSecretGroup:
      description: patch secret group response
      content:
         application/json:
          schema:
            $ref: "#/components/schemas/SecretGroupPatchResponse"
    SuccessDeleteSecretGroup:
      description: delete secret group response

  schemas:
    errorsResponse:
      type: object
      title: errorsResponse
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                title: type
              dataPath:
                type: string
                title: dataPath
              keyword:
                type: string
                title: keyword
              schema:
                type: string
                title: schema
              data:
                type: string
                title: data
              message:
                type: string
                title: message

    SecretGroupCollection:
      type: array
      items:
        $ref: "#/components/schemas/SecretGroup"

    SecretGroup:
      type: object
      properties:
        name:
          type: string
        downloadable:
          type: boolean
        meta:
          $ref: "#/components/schemas/Meta"

    SecretGroupPostBody:
      type: object
      properties:
        name:
          type: string
        downloadable:
          type: boolean

    SecretGroupPatchBody:
      type: object
      properties:
        name:
          type: string

    SecretGroupPostResponse:
      type: object
      properties:
        message:
          type: string
        id:
          type: string

    SecretGroupPatchResponse:
      type: object
      properties:
        message:
          type: string

    Meta:
      type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
        modifiedAt:
          type: string
        modifiedBy:
          type: string
        locked:
          type: boolean
        lockedBy:
          type: string
        currentState:
          type: string